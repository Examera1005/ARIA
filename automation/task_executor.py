"""
ü§ñ Ex√©cuteur de T√¢ches IA Avanc√© pour ARIA
=========================================

Syst√®me d'IA capable d'ex√©cuter n'importe quelle t√¢che demand√©e :
- Compr√©hension du langage naturel avanc√©e
- Planification et ex√©cution de t√¢ches complexes
- Contr√¥le complet du syst√®me (souris, clavier, applications)
- Automation web intelligente
- Gestion des emails et communication
"""

import asyncio
import logging
import re
import json
import time
import os
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass
from datetime import datetime, timedelta
import threading
import queue

# Modules syst√®me et automation
import pyautogui
import keyboard
import mouse
import psutil
import subprocess
from pathlib import Path

# Modules locaux ARIA
from .system_controller import SystemController
from .window_manager import WindowManager
try:
    from .web_automation import WebAutomation
except ImportError:
    WebAutomation = None

try:
    from ..core.intent_analyzer import IntentAnalyzer, IntentResult
except ImportError:
    try:
        import sys
        from pathlib import Path
        sys.path.append(str(Path(__file__).parent.parent))
        from core.intent_analyzer import IntentAnalyzer, IntentResult
    except ImportError:
        IntentAnalyzer = None
        IntentResult = None

try:
    from ..apis.gmail_manager import GmailManager
except ImportError:
    try:
        from apis.gmail_manager import GmailManager
    except ImportError:
        GmailManager = None

try:
    from ..apis.calendar_manager import CalendarManager
except ImportError:
    try:
        from apis.calendar_manager import CalendarManager
    except ImportError:
        CalendarManager = None

logger = logging.getLogger(__name__)

@dataclass
class TaskStep:
    """√âtape d'une t√¢che complexe"""
    action: str
    parameters: Dict[str, Any]
    description: str
    completed: bool = False
    result: Any = None
    error: Optional[str] = None

@dataclass
class TaskResult:
    """R√©sultat d'ex√©cution d'une t√¢che"""
    success: bool
    message: str
    data: Any = None
    steps_completed: List[TaskStep] = None
    execution_time: float = 0.0

class AITaskExecutor:
    """Ex√©cuteur de t√¢ches IA principal"""
    
    def __init__(self, config=None):
        self.config = config or {}
        self.logger = logging.getLogger("ARIA.TaskExecutor")
        
        # Initialisation des modules
        self.system_controller = SystemController(config)
        self.window_manager = WindowManager(config)
        
        # Analyseur d'intentions (optionnel)
        if IntentAnalyzer:
            self.intent_analyzer = IntentAnalyzer(config)
        else:
            self.intent_analyzer = None
        
        # Modules optionnels
        self.web_automation = WebAutomation(config) if WebAutomation else None
        self.gmail_manager = GmailManager(config) if GmailManager else None
        self.calendar_manager = CalendarManager(config) if CalendarManager else None
        
        # Configuration de PyAutoGUI
        pyautogui.FAILSAFE = True
        pyautogui.PAUSE = 0.5
        
        # Cache des r√©sultats et contexte
        self.task_history = []
        self.current_context = {}
        
        # Patterns de t√¢ches avanc√©es
        self.task_patterns = self._load_task_patterns()
        
        self.logger.info("ü§ñ Ex√©cuteur de t√¢ches IA initialis√©")
    
    def _load_task_patterns(self) -> Dict[str, Dict]:
        """Charge les patterns de t√¢ches complexes"""
        return {
            "open_application": {
                "keywords": ["ouvre", "lance", "d√©marre", "open", "start"],
                "executor": self._execute_open_application
            },
            "close_application": {
                "keywords": ["ferme", "quitte", "arr√™te", "close", "quit", "stop"],
                "executor": self._execute_close_application
            },
            "web_search": {
                "keywords": ["recherche", "cherche", "google", "search", "find"],
                "executor": self._execute_web_search
            },
            "web_navigation": {
                "keywords": ["va sur", "navigue", "visite", "go to", "navigate"],
                "executor": self._execute_web_navigation
            },
            "youtube_search": {
                "keywords": ["youtube", "vid√©o", "video", "regarde"],
                "executor": self._execute_youtube_search
            },
            "email_management": {
                "keywords": ["email", "mail", "courrier", "message"],
                "executor": self._execute_email_management
            },
            "system_control": {
                "keywords": ["√©teins", "red√©marre", "verrouille", "shutdown", "restart", "lock"],
                "executor": self._execute_system_control
            },
            "window_management": {
                "keywords": ["fen√™tre", "window", "minimise", "maximise", "arrange"],
                "executor": self._execute_window_management
            },
            "mouse_keyboard": {
                "keywords": ["clique", "tape", "√©cris", "click", "type", "write"],
                "executor": self._execute_mouse_keyboard
            },
            "screenshot": {
                "keywords": ["capture", "screenshot", "photo √©cran"],
                "executor": self._execute_screenshot
            }
        }
    
    async def execute_task(self, task_description: str, context: Dict = None) -> TaskResult:
        """Ex√©cute une t√¢che d√©crite en langage naturel"""
        start_time = time.time()
        
        try:
            self.logger.info(f"üéØ Ex√©cution de la t√¢che : {task_description}")
            
            # Analyse de l'intention
            intent_result = await self._analyze_intent(task_description, context)
            
            if not intent_result:
                return TaskResult(
                    success=False,
                    message="Impossible de comprendre la t√¢che demand√©e",
                    execution_time=time.time() - start_time
                )
            
            # Planification des √©tapes
            steps = await self._plan_task_steps(intent_result, context)
            
            if not steps:
                return TaskResult(
                    success=False,
                    message="Impossible de planifier l'ex√©cution de cette t√¢che",
                    execution_time=time.time() - start_time
                )
            
            # Ex√©cution des √©tapes
            completed_steps = []
            overall_success = True
            final_message = "T√¢che ex√©cut√©e avec succ√®s"
            final_data = None
            
            for step in steps:
                self.logger.info(f"üìã Ex√©cution √©tape : {step.description}")
                
                try:
                    # Trouve l'ex√©cuteur appropri√©
                    executor = self._find_executor(step.action)
                    
                    if executor:
                        step.result = await executor(step.parameters, intent_result)
                        step.completed = True
                        
                        if step.result and hasattr(step.result, 'success'):
                            if not step.result.success:
                                step.error = step.result.message
                                overall_success = False
                        
                        # Sauvegarde du r√©sultat final
                        if step.action in ["web_search", "youtube_search", "email_management"]:
                            final_data = step.result
                    else:
                        step.error = f"Ex√©cuteur non trouv√© pour l'action : {step.action}"
                        overall_success = False
                    
                    completed_steps.append(step)
                    
                    # Petite pause entre les √©tapes
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    step.error = str(e)
                    step.completed = False
                    completed_steps.append(step)
                    overall_success = False
                    self.logger.error(f"Erreur √©tape '{step.description}' : {e}")
            
            # Construction du message final
            if not overall_success:
                failed_steps = [s for s in completed_steps if s.error]
                final_message = f"T√¢che partiellement √©chou√©e. {len(failed_steps)} √©tape(s) en erreur."
            
            execution_time = time.time() - start_time
            
            # Sauvegarde dans l'historique
            result = TaskResult(
                success=overall_success,
                message=final_message,
                data=final_data,
                steps_completed=completed_steps,
                execution_time=execution_time
            )
            
            self.task_history.append({
                "timestamp": datetime.now(),
                "task": task_description,
                "result": result
            })
            
            self.logger.info(f"‚úÖ T√¢che termin√©e en {execution_time:.2f}s : {final_message}")
            return result
            
        except Exception as e:
            execution_time = time.time() - start_time
            error_msg = f"Erreur critique lors de l'ex√©cution : {e}"
            self.logger.error(error_msg)
            
            return TaskResult(
                success=False,
                message=error_msg,
                execution_time=execution_time
            )
    
    async def _analyze_intent(self, task_description: str, context: Dict = None) -> Optional[Any]:
        """Analyse l'intention de la t√¢che"""
        try:
            if not self.intent_analyzer:
                # Fallback: analyse basique par mots-cl√©s
                return self._basic_intent_analysis(task_description)
                
            # Utilise l'analyseur d'intentions existant
            intent_result = self.intent_analyzer.analyze(task_description, context)
            return intent_result
            
        except Exception as e:
            self.logger.error(f"Erreur analyse intention : {e}")
            return self._basic_intent_analysis(task_description)
    
    def _basic_intent_analysis(self, task_description: str) -> Any:
        """Analyse d'intention basique sans IA"""
        text = task_description.lower()
        
        # Simple class to mimic IntentResult
        class BasicIntentResult:
            def __init__(self, intent, entities, confidence, original_text):
                self.intent = intent
                self.entities = entities
                self.confidence = confidence
                self.original_text = original_text
        
        # Analyse par mots-cl√©s
        if any(word in text for word in ["ouvre", "lance", "d√©marre", "open", "start"]):
            # Extrait le nom de l'application
            for pattern in ["ouvre ", "lance ", "d√©marre ", "open ", "start "]:
                if pattern in text:
                    app_name = text.split(pattern)[1].split()[0]
                    return BasicIntentResult("open_application", {"application": app_name}, 0.8, task_description)
        
        elif any(word in text for word in ["ferme", "quitte", "close", "quit"]):
            for pattern in ["ferme ", "quitte ", "close ", "quit "]:
                if pattern in text:
                    app_name = text.split(pattern)[1].split()[0] if len(text.split(pattern)) > 1 else ""
                    return BasicIntentResult("close_application", {"application": app_name}, 0.8, task_description)
        
        elif any(word in text for word in ["google", "recherche", "cherche", "search"]):
            return BasicIntentResult("web_search", {"query": task_description}, 0.7, task_description)
        
        elif any(word in text for word in ["youtube", "vid√©o", "video"]):
            return BasicIntentResult("youtube_search", {"query": task_description}, 0.7, task_description)
        
        elif any(word in text for word in ["capture", "screenshot"]):
            return BasicIntentResult("screenshot", {}, 0.9, task_description)
        
        else:
            return BasicIntentResult("unknown", {}, 0.1, task_description)
    
    async def _plan_task_steps(self, intent_result: Any, context: Dict = None) -> List[TaskStep]:
        """Planifie les √©tapes n√©cessaires pour accomplir la t√¢che"""
        steps = []
        
        try:
            intent = intent_result.intent
            entities = intent_result.entities
            
            # Planification bas√©e sur l'intention
            if intent == "open_application":
                app_name = entities.get("application", entities.get("target", ""))
                steps.append(TaskStep(
                    action="open_application",
                    parameters={"app_name": app_name},
                    description=f"Ouvrir l'application {app_name}"
                ))
            
            elif intent == "close_application":
                app_name = entities.get("application", entities.get("target", ""))
                steps.append(TaskStep(
                    action="close_application", 
                    parameters={"app_name": app_name},
                    description=f"Fermer l'application {app_name}"
                ))
            
            elif intent == "web_search":
                query = entities.get("query", entities.get("search_term", ""))
                result_number = entities.get("result_number", 1)
                
                steps.append(TaskStep(
                    action="web_search",
                    parameters={"query": query, "result_number": result_number},
                    description=f"Rechercher '{query}' et aller au r√©sultat #{result_number}"
                ))
            
            elif intent == "youtube_search":
                query = entities.get("query", entities.get("search_term", ""))
                result_number = entities.get("result_number", 1)
                
                steps.append(TaskStep(
                    action="youtube_search", 
                    parameters={"query": query, "result_number": result_number},
                    description=f"Rechercher '{query}' sur YouTube et lire la vid√©o #{result_number}"
                ))
            
            elif intent == "email_read":
                sender = entities.get("sender", "")
                steps.append(TaskStep(
                    action="email_management",
                    parameters={"action": "read", "sender": sender},
                    description=f"Lire les emails de {sender}" if sender else "Lire les emails"
                ))
            
            elif intent == "system_command":
                command = entities.get("command", "")
                steps.append(TaskStep(
                    action="system_control",
                    parameters={"command": command},
                    description=f"Ex√©cuter la commande syst√®me : {command}"
                ))
            
            # Cas complexes n√©cessitant plusieurs √©tapes
            elif "firefox" in intent_result.original_text.lower() and "google" in intent_result.original_text.lower():
                # Exemple : "ouvre firefox et va sur google puis cherche cat video et choisis la deuxi√®me vid√©o"
                steps.extend([
                    TaskStep("open_application", {"app_name": "firefox"}, "Ouvrir Firefox"),
                    TaskStep("web_navigation", {"url": "google.com"}, "Aller sur Google"),
                    TaskStep("web_search", {"query": "cat video", "result_number": 2}, "Chercher 'cat video' et choisir le 2√®me r√©sultat")
                ])
            
            return steps
            
        except Exception as e:
            self.logger.error(f"Erreur planification : {e}")
            return []
    
    def _find_executor(self, action: str) -> Optional[callable]:
        """Trouve l'ex√©cuteur appropri√© pour une action"""
        return self.task_patterns.get(action, {}).get("executor")
    
    # ========== EX√âCUTEURS SP√âCIALIS√âS ==========
    
    async def _execute_open_application(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute l'ouverture d'une application"""
        app_name = params.get("app_name", "")
        
        try:
            success = self.system_controller.open_application(app_name)
            
            if success:
                # Petite attente pour que l'application se lance
                await asyncio.sleep(2)
                return TaskResult(True, f"Application {app_name} ouverte avec succ√®s")
            else:
                return TaskResult(False, f"Impossible d'ouvrir l'application {app_name}")
                
        except Exception as e:
            return TaskResult(False, f"Erreur ouverture {app_name}: {e}")
    
    async def _execute_close_application(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute la fermeture d'une application"""
        app_name = params.get("app_name", "")
        
        try:
            success = self.system_controller.close_application(app_name)
            
            if success:
                return TaskResult(True, f"Application {app_name} ferm√©e avec succ√®s")
            else:
                return TaskResult(False, f"Impossible de fermer l'application {app_name}")
                
        except Exception as e:
            return TaskResult(False, f"Erreur fermeture {app_name}: {e}")
    
    async def _execute_web_search(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute une recherche web"""
        if not self.web_automation:
            return TaskResult(False, "Module d'automation web non disponible")
        
        query = params.get("query", "")
        result_number = params.get("result_number", 1)
        
        try:
            # D√©marre le navigateur si n√©cessaire
            if not self.web_automation.driver:
                if not self.web_automation.start_browser():
                    return TaskResult(False, "Impossible de d√©marrer le navigateur")
            
            # Effectue la recherche
            url = self.web_automation.search_google(query, result_number)
            
            if url:
                # Navigue vers le r√©sultat
                self.web_automation.navigate_to(url)
                return TaskResult(True, f"Recherche '{query}' effectu√©e, r√©sultat #{result_number} ouvert", {"url": url})
            else:
                return TaskResult(False, f"Aucun r√©sultat trouv√© pour '{query}'")
                
        except Exception as e:
            return TaskResult(False, f"Erreur recherche web: {e}")
    
    async def _execute_web_navigation(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute une navigation web"""
        if not self.web_automation:
            return TaskResult(False, "Module d'automation web non disponible")
        
        url = params.get("url", "")
        
        try:
            # D√©marre le navigateur si n√©cessaire
            if not self.web_automation.driver:
                if not self.web_automation.start_browser():
                    return TaskResult(False, "Impossible de d√©marrer le navigateur")
            
            success = self.web_automation.navigate_to(url)
            
            if success:
                return TaskResult(True, f"Navigation vers {url} r√©ussie")
            else:
                return TaskResult(False, f"Impossible de naviguer vers {url}")
                
        except Exception as e:
            return TaskResult(False, f"Erreur navigation: {e}")
    
    async def _execute_youtube_search(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute une recherche YouTube"""
        if not self.web_automation:
            return TaskResult(False, "Module d'automation web non disponible")
        
        query = params.get("query", "")
        result_number = params.get("result_number", 1)
        
        try:
            # D√©marre le navigateur si n√©cessaire
            if not self.web_automation.driver:
                if not self.web_automation.start_browser():
                    return TaskResult(False, "Impossible de d√©marrer le navigateur")
            
            # Effectue la recherche YouTube
            url = self.web_automation.search_youtube_videos(query, result_number)
            
            if url:
                # Navigue vers la vid√©o
                self.web_automation.navigate_to(url)
                return TaskResult(True, f"Vid√©o '{query}' #{result_number} en cours de lecture", {"url": url})
            else:
                return TaskResult(False, f"Aucune vid√©o trouv√©e pour '{query}'")
                
        except Exception as e:
            return TaskResult(False, f"Erreur recherche YouTube: {e}")
    
    async def _execute_email_management(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute la gestion des emails"""
        if not self.gmail_manager:
            return TaskResult(False, "Module Gmail non disponible")
        
        action = params.get("action", "read")
        sender = params.get("sender", "")
        
        try:
            if action == "read":
                emails = self.gmail_manager.get_recent_emails(sender_filter=sender, max_results=10)
                
                if emails:
                    # R√©sum√© des emails
                    summary = []
                    for email in emails[:5]:  # Limite √† 5 emails
                        summary.append({
                            "from": email.get("from", "Inconnu"),
                            "subject": email.get("subject", "Sans sujet"),
                            "snippet": email.get("snippet", "")[:100]
                        })
                    
                    return TaskResult(True, f"{len(emails)} email(s) trouv√©(s)", {"emails": summary})
                else:
                    return TaskResult(True, "Aucun email trouv√©", {"emails": []})
            
            return TaskResult(False, f"Action email non support√©e: {action}")
            
        except Exception as e:
            return TaskResult(False, f"Erreur gestion email: {e}")
    
    async def _execute_system_control(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute les commandes syst√®me"""
        command = params.get("command", "")
        
        try:
            if "shutdown" in command or "√©teins" in command:
                success = self.system_controller.shutdown_system()
            elif "restart" in command or "red√©marre" in command:
                success = self.system_controller.restart_system() 
            elif "lock" in command or "verrouille" in command:
                success = self.system_controller.lock_workstation()
            elif "sleep" in command or "veille" in command:
                success = self.system_controller.sleep_system()
            else:
                return TaskResult(False, f"Commande syst√®me non reconnue: {command}")
            
            if success:
                return TaskResult(True, f"Commande syst√®me '{command}' ex√©cut√©e")
            else:
                return TaskResult(False, f"√âchec de la commande syst√®me '{command}'")
                
        except Exception as e:
            return TaskResult(False, f"Erreur commande syst√®me: {e}")
    
    async def _execute_window_management(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute la gestion des fen√™tres"""
        action = params.get("action", "")
        
        try:
            if "minimize" in action or "minimise" in action:
                success = self.system_controller.minimize_all_windows()
            elif "maximize" in action or "maximise" in action:
                windows = self.window_manager.get_visible_windows()
                success = len(windows) > 0
                for window in windows:
                    self.window_manager.maximize_window(window)
            else:
                return TaskResult(False, f"Action fen√™tre non reconnue: {action}")
            
            if success:
                return TaskResult(True, f"Gestion fen√™tres '{action}' ex√©cut√©e")
            else:
                return TaskResult(False, f"√âchec gestion fen√™tres '{action}'")
                
        except Exception as e:
            return TaskResult(False, f"Erreur gestion fen√™tres: {e}")
    
    async def _execute_mouse_keyboard(self, params: Dict, intent: Any) -> TaskResult:
        """Ex√©cute les actions souris/clavier"""
        action = params.get("action", "")
        target = params.get("target", "")
        text = params.get("text", "")
        
        try:
            if "click" in action or "clique" in action:
                # Clic souris - peut √™tre am√©lior√© avec reconnaissance d'images
                pyautogui.click()
                return TaskResult(True, "Clic de souris ex√©cut√©")
            
            elif "type" in action or "tape" in action or "√©cris" in action:
                if text:
                    pyautogui.write(text)
                    return TaskResult(True, f"Texte tap√©: {text}")
                else:
                    return TaskResult(False, "Aucun texte √† taper sp√©cifi√©")
            
            elif "key" in action or "touche" in action:
                if target:
                    pyautogui.press(target)
                    return TaskResult(True, f"Touche {target} press√©e")
                else:
                    return TaskResult(False, "Aucune touche sp√©cifi√©e")
            
            return TaskResult(False, f"Action souris/clavier non reconnue: {action}")
            
        except Exception as e:
            return TaskResult(False, f"Erreur action souris/clavier: {e}")
    
    async def _execute_screenshot(self, params: Dict, intent: Any) -> TaskResult:
        """Prend une capture d'√©cran"""
        save_path = params.get("save_path", f"screenshot_{int(time.time())}.png")
        
        try:
            screenshot = pyautogui.screenshot()
            screenshot.save(save_path)
            
            return TaskResult(True, f"Capture d'√©cran sauv√©e: {save_path}", {"path": save_path})
            
        except Exception as e:
            return TaskResult(False, f"Erreur capture d'√©cran: {e}")
    
    def get_task_history(self) -> List[Dict]:
        """Retourne l'historique des t√¢ches"""
        return self.task_history.copy()
    
    def clear_task_history(self):
        """Vide l'historique des t√¢ches"""
        self.task_history.clear()
        self.logger.info("Historique des t√¢ches vid√©")

# Exemple d'utilisation
if __name__ == "__main__":
    async def test_executor():
        logging.basicConfig(level=logging.INFO)
        
        executor = AITaskExecutor()
        
        # Test de diff√©rentes t√¢ches
        tasks = [
            "ouvre firefox",
            "va sur google et cherche cat video puis choisis la deuxi√®me vid√©o",
            "prends une capture d'√©cran",
            "ferme firefox"
        ]
        
        for task in tasks:
            print(f"\nüéØ Test: {task}")
            result = await executor.execute_task(task)
            print(f"‚úÖ R√©sultat: {result.message}")
            await asyncio.sleep(2)
    
    # Ex√©cution des tests
    asyncio.run(test_executor())
